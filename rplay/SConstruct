# dependencies:
#    libgstreamer1.0-dev
#    libzmq3-dev
#    libasound2-dev

# --release-build option
AddOption('--release-build', action='store_true', dest='release_build',	help='create optimized binary', default=False)

cxxflags = ['-std=c++14', '-Wall']  # common cxxflags

if GetOption('release_build'):
	cxxflags.extend(['-O2'])
else:
	cxxflags.extend(['-g', '-O0'])

env = Environment(
	CCFLAGS=cxxflags,
	LIBS=[
		'pthread',
		'boost_filesystem',
		'boost_system',
		'boost_thread',
		'boost_log',
		'boost_log_setup',
		'boost_date_time',
		'boost_program_options'],
	CPPDEFINES=['BOOST_SPIRIT_THREADSAFE', 'BOOST_LOG_DYN_LINK'],  # json support
	CPPPATH=['libs/']
)

env.ParseConfig('pkg-config --cflags --libs gstreamer-1.0 libzmq alsa')


def find_rplay_version():
	'''returns remoteplayer version as a string'''
	import subprocess, re, datetime, os

	if os.path.exists('version'):
		# grep it from debian/changelog
		pipe = subprocess.Popen(
			"cat version",
			stdout=subprocess.PIPE, shell=True)
		ver_line = pipe.communicate()[0].strip('\n')  # e.g. '1.0.6'
	else:
		ver_line = '0.0.0'

	return ver_line

def create_version_cpp(target, source, env):
	'''creates version.cpp surce file'''
	src = """/* this file is automatically generated by build script (see SConstruct), do not edit */
#include "version.hpp"

std::string software_build()
{
	return std::string{"%s"};
}

std::string software_version()
{
	return std::string{"%s"};
}

""" % ('%s.%s' % git_version_descriptor(), find_rplay_version())

	with open(str(target[0]), 'w') as fout:
		fout.write(src)


# version (version.cpp)
def git_version_descriptor():
	'''returns pair (DATE, HASH) describes commit'''
	import subprocess, re, datetime

	# ask git for hash and date
	pipe = subprocess.Popen(
		'git;log;-1;--date=iso;--pretty=format:"%h %ad"'.split(';'), stdout=subprocess.PIPE)
	desc_line = pipe.communicate()[0]  # e.g. '"47b8e31 2017-03-06 13:01:38 +0100"'

	# parse git's answer
	ma = re.match(r'"(\w{7}) (\d{4})-(\d{2})-(\d{2}) \d{2}:\d{2}:\d{2} \+\d{4}"', desc_line)
	short_hash, year, mounth, day = ma.group(1, 2, 3, 4)

	d = datetime.date(int(year), int(mounth), int(day))

	return (d.strftime('%Y%m%d'), short_hash)


version_cpp = env.Command('version.cpp', '', create_version_cpp)
AlwaysBuild(version_cpp)

version_obj = env.Object('version.cpp')
Requires(version_obj, version_cpp)

env.Append(LINKFLAGS=str(version_obj[0]))


# static libzmqu library
zmqu_lib = env.StaticLibrary('zmqu', Glob('libs/zmqu/*.cpp'))

# static rp library
rp_lib = env.StaticLibrary('rp', Glob('libs/rplib/*.cpp'))

common_objs = env.Object([
	'gst_audio_player.cpp',
	'player.cpp',
	'playlist.cpp',
	'library.cpp',
	'config.cpp',
	'io.cpp',
	'json.cpp',
	'fs.cpp',
	'zmq_interface.cpp',
	'volume_control.cpp'
]);

Requires(common_objs, version_obj)


env.Program('rplay', [
	'rplay.cpp',
	common_objs,
	rp_lib,
	zmqu_lib
])
